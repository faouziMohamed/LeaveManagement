@* ReSharper disable Html.TagShouldNotBeSelfClosed *@
@page "/leave-requests"
@page "/manage-leaves"
@page "/manage-requests"
@inherits LeaveRequestBase

@code {
  public string ModalId { get; set; } = $"leave-request-modal{Guid.NewGuid():N}";
  protected async Task OnDelete(LeaveRequestDto removedRequest)
  {
    await LeaveRequestService.DeleteLeaveRequest(removedRequest.LeaveRequestId);
    await LeaveRequestLocalStorage.DeleteFromLocalStorage(removedRequest);
    LeaveRequests = LeaveRequests.Where(x => x.LeaveRequestId != removedRequest.LeaveRequestId).ToList();
  }
  protected async Task OnUpdate(LeaveRequestDto updatedRequest)
  {

    var requestUpdated = new UpdateLeaveRequestDto
    {
      DateUpdated = DateTime.Now,
      EndDate = updatedRequest.EndDate,
      StartDate = updatedRequest.StartDate,
      LeaveRequestId = updatedRequest.LeaveRequestId,
      RequestingEmployeeId = ConnectedUser!.EmployeeId,
      Status = updatedRequest.Status,
      LeaveType = updatedRequest.LeaveType
    };
    await LeaveRequestService.UpdateLeaveRequest(requestUpdated);
    await LeaveRequestLocalStorage.UpdateLocalStorage(updatedRequest);
    LeaveRequests = LeaveRequests.Where(x => x.LeaveRequestId != updatedRequest.LeaveRequestId).ToList();
    LeaveRequests.Add(updatedRequest);
  }

  private string Title = "Gestions des congés";
}

<ContentWrapper>
  <div class="container">
    <h1>
      Liste des demandes
    </h1>
    @if (!LeaveRequests.Any() && ErrorMessage == null && IsLoading)
    {
      <DisplaySpinner ClassName="bg-opacity-0"/>
    }
    else if (!IsLoading && ErrorMessage != null)
    {
      <div class="alert alert-danger" role="alert">
        <p class="text-danger text-xs">
          <i class="fad fa-times"/>
          @ErrorMessage
        </p>
      </div>
    }
    else if (!LeaveRequests.Any())
    {
      <div class="alert alert-info" role="alert">
        <p class="text-info text-xs">
          <i class="fad fa-info-circle"/>
          Aucune demande de congé n'a été trouvée.
        </p>
      </div>
      <!-- Button trigger modal -->
      <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#@ModalId">
        <i class="fas fa-plus"/> Nouvelle demande
      </button>

      <NewLeaveRequest
        @bind-Leave=NewAddedLeaveRequest
        ConnectedUser="ConnectedUser"
        OnSubmit="OnSubmit"
        ModalId="@ModalId"
        SubmitBtnText="Ajouter"
        ModalTitle="Nouvelle demande de congé"/>
    }
    else
    {
      <!-- Button trigger modal -->
      <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#@ModalId">
        <i class="fas fa-plus"/> Nouvelle demande
      </button>
      <NewLeaveRequest
        @bind-Leave=NewAddedLeaveRequest
        ConnectedUser="ConnectedUser"
        OnSubmit="OnSubmit"
        SubmitBtnText="Ajouter"
        ModalId="@ModalId"
        ModalTitle="Nouvelle demande de congé"/>
      <table class="table">
        <tr>
          <th class="text-center">Nom</th>
          <th class="text-center">Prénom</th>
          <th class="text-center">Type de congé</th>
          <th class="text-center">Service</th>
          <th class="text-center">Date de debut</th>
          <th class="text-center">Date de fin</th>
          <th class="px-0 text-center text-w">
            Décision du responsable
          </th>

          <th class="px-2">Modifier</th>
          @if (ConnectedUser!.Role == UserRole.Admin)
          {
            <th class="pl-2">Supprimer</th>
          }
        </tr>
        @foreach (var request in LeaveRequests)
        {
          <DisplayRowOfLeaveRequest
            Row="@request"
            CurrentUser="@ConnectedUser"
            OnDelete="@OnDelete"
            OnUpdate="@OnUpdate"/>
        }
      </table>
    }
  </div>
</ContentWrapper >
