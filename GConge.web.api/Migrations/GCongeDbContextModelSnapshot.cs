// <auto-generated />
using System;
using GConge.web.api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GConge.web.api.Migrations
{
    [DbContext(typeof(GCongeDbContext))]
    partial class GCongeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GConge.Models.Models.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 9, 23, 22, 22, 21, 184, DateTimeKind.Local).AddTicks(7511),
                            LastModifiedBy = "System",
                            LastModifiedDate = new DateTime(2022, 9, 23, 22, 22, 21, 184, DateTimeKind.Local).AddTicks(7517),
                            Service = "IT",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("GConge.Models.Models.Entities.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RequestingEmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RequestingEmployeeId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("GConge.Models.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 9, 23, 22, 22, 21, 184, DateTimeKind.Local).AddTicks(7294),
                            Email = "admin.email@email.com",
                            Firstname = "Admin",
                            LastModifiedBy = "System",
                            LastModifiedDate = new DateTime(2022, 9, 23, 22, 22, 21, 184, DateTimeKind.Local).AddTicks(7340),
                            Lastname = "Admin",
                            Password = new byte[] { 0, 246, 190, 224, 41, 33, 204, 251, 104, 169, 250, 56, 220, 161, 201, 117, 62, 103, 246, 64, 63, 62, 80, 50, 65, 147, 215, 215, 225, 222, 100, 99, 118, 6, 169, 97, 46, 163, 162, 50, 68, 207, 159, 165, 81, 141, 47, 25, 21, 97, 87, 3, 103, 32, 211, 168, 225, 28, 217, 90, 133, 191, 250, 21 },
                            PasswordSalt = new byte[] { 109, 129, 206, 88, 196, 0, 217, 106, 65, 180, 158, 41, 246, 137, 199, 181, 180, 41, 48, 4, 70, 176, 181, 229, 205, 29, 53, 77, 18, 122, 66, 168, 28, 24, 67, 70, 131, 177, 164, 75, 89, 193, 43, 33, 147, 161, 68, 37, 120, 155, 185, 205, 200, 25, 8, 57, 237, 220, 8, 243, 215, 106, 244, 162, 61, 48, 221, 56, 95, 69, 102, 158, 9, 26, 160, 87, 77, 28, 97, 237, 162, 169, 78, 119, 176, 144, 124, 182, 182, 240, 116, 167, 68, 247, 236, 14, 247, 12, 66, 95, 163, 170, 71, 29, 83, 191, 151, 142, 211, 151, 90, 255, 175, 59, 21, 48, 196, 155, 167, 23, 126, 106, 191, 85, 80, 172, 55, 181 },
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("GConge.Models.Models.Entities.Employee", b =>
                {
                    b.HasOne("GConge.Models.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GConge.Models.Models.Entities.LeaveRequest", b =>
                {
                    b.HasOne("GConge.Models.Models.Entities.Employee", "RequestingEmployee")
                        .WithMany()
                        .HasForeignKey("RequestingEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestingEmployee");
                });
#pragma warning restore 612, 618
        }
    }
}
